= slide 'But first…' do
  p Да, срам ни е

= slide 'Слона в стаята' do
  p обещава до края на седмицата да отговорим на идеите за проекти
  img src="http://i.imgur.com/8H99gzp.png" style="height: 500px"

= slide 'Решението' do
  p Единствения начин да се принудим да го направим е да обявим дата за Milestone 2

  p.action
    strong 08 Юни 2015

= slide 'Какво очакваме?' do

    p.action Публично достъпно хранилище - github, bitbucket, google code (не!), self-hosted
    p.action LICENSE, README
    p.action Малко код, показващ идея как смятате да напишете проекта си
    p.action Ще пуснем новина с по - подробно обяснение

= slide 'Meta' do
  p Платформа за cross-platform разработване на приложения
  ul
    li Qt, а не QT (/ˈkjuːt/ "cute")
    li Cross-platform application framework
    li Написан е на C++, но с известно количество разширения (MOC)
    li Наличен е както под комерсиален лиценз, така и под LGPL v2 и GPL v3

  list:
    Създаден от Trolltech - 1994
    Nokia купува Trolltech - 2008
    Финландската Digia купува Qt от Nokia - 2011-2012
    В момента е собственост на норвежката Qt company(филиал на Digia) 

= slide 'Поддържани платформи' do
  ul
    li Android
    li Embedded Linux
    li iOS
    li OS X
    li QNX / BlackBerry 10
    li Sailfish OS
    li VxWorks
    li Wayland
    li Windows
    li Windows CE
    li X11

= slide 'Неофициални' do
  ul
    li OpenSolaris
    li Haiku
    li OS/2
    li webOS
    li Amazon Kindle DX
    li Ubuntu
    li AmigaOS
    li Tizen

  p Deprecated
  ul
    li Symbian
    li Windows Mobile

= slide 'В началото бе QApplication' do
  example:
    #include <QApplication>
    #include <QLabel>

    int main(int argc, char *argv[])
    {
        QApplication app(argc, argv);
        QLabel *label = new QLabel("Hello Qt!");
        label->show();
        return app.exec();
    }

= slide 'Същото ама на Python (PyQt)' do
  example:
    import sys
    from PyQt5 import Qt

    app = Qt.QApplication(sys.argv)
    label = Qt.QLabel("Hello Qt!")
    label.show()
    app.exec_()

= slide 'Първоначален план' do
  list:
    Имаме нужда от истински прозорец
    Бутони за старт, пауза и изход
    Клетки, в които да има мини или индикация за брой околни мини
    …


= slide 'Прозорец' do
  p Имаме опцията да използваме `QMainWindow`. Това ни дава:

  img src="http://qt-project.org/doc/qt-4.8/images/mainwindowlayout.png"

  p В нашия случай това ще е overkill. Прозорецът ни може да е един обикновен `QWidget`.

= slide 'Layouts' do
  p Тъй като ще има повече от един widget, ще трябва да ги разположим по някакъв начин

  div.action
    p Qt ни дава няколко такива:
    ul
      li QHBoxLayout
      li QVBoxLayout
      li QFormLayout
      li QGridLayout

= slide 'Layouts' do
  p За нашите цели изглежда най-удачно да ползваме QGridLayout
  p Можем просто да извикваме <code>addWidget</code> метода му, за да добавяме на определена позиция

= slide 'Елементите' do
  p Ние ще използваме:
  ul
    li QLabel
    li QWidgetItem
    li QSpacerItem

= slide 'Сигнали и слотове' do
  p Вместо events или callbacks, Qt изпраща сигнал от потребителско действие в слот (функция)

  example:
    startButton.clicked.connect(self.board.start)
    pauseButton.clicked.connect(self.board.pause)
    quitButton.clicked.connect(QApplication.instance().quit)

= slide 'Сигнали и слотове' do
  img src="http://qt-project.org/doc/qt-4.8/images/abstract-connections.png"

= slide 'По-интересни проблеми' do
  ul
    li кадри
    li collision detection

= slide 'Добра отправна точка' do
  p Qt е <strong>необятен</strong>. Нека разгледаме една имплементация на тетрис.

  p 
    a href="https://github.com/baoboa/pyqt5/blob/master/examples/widgets/tetrix.py" тук

= slide 'Кадри' do
  p
    | Ако правим игра, а не просто приложение с графичен интерфейс, 
    | опираме до това, че трябва да имаме фреймове. N пъти в секунда 
    | ще трябва да преначертаваме дадена област, лъжейки човешкото 
    | око, че разни неща се движат. В нашия случай, това е борда.

  example:
    class TetrixBoard(QFrame):
        BoardWidth = 10
        BoardHeight = 22
        scoreChanged = pyqtSignal(int)
        levelChanged = pyqtSignal(int)
        linesRemovedChanged = pyqtSignal(int)

        def start(self):...
        def pause(self):...
        def paintEvent(self):...
        def keyPressEvent(self):...
        def keyPressEvent(self):...
        def timerEvent(self, event):...
        def oneLineDown(self):...
        def dropDown(self):...
        ...

= slide 'Collision detection' do
  p 4 основни подхода:

  list:
    Axis-Aligned Bounding Box
    Circle-Circle
    HashMap
    Pixel-Perfect

= slide 'But wait…' do
  p We kid you not, Qt е <strong>НЕОБЯТЕН</strong>
  list:
    Data storage
    Multimedia
    Networking
    Mobile APIs
    QML

    …
