= slide 'Операционни системи' do

  p.action Парчета код, които управляват хардуера
  p.action Позволяват изпълнението на потребителски програми
  p.action Има ги разни (Windows/Linux/OS X)


= slide 'Kernel' do

  p.action Ядрото (duh) на операционната система
  p.action Има пряк достъп до всичко в компютъра ви
  p.action Грижи се за потребителските програми


= slide 'Драйвъри' do

  p.action Парчета код в ядрото, които управляват конкретен хардуер
  p.action Могат да се слагат отделно от ОС-а


= slide 'Userland' do

  p.action "GNU" частта от "GNU/Linux"
  p.action Полезните програмки, без които една ОС е безполезна
  p.action Текстови редактори, web browser-и, терминали, графични среди, etc


= slide 'User space / Kernel space' do

  p Userland частта вървят в първото
  p Kernel-a върви във второто
  p.action Това е грубо казано, демек е омешано, но така е в общия случай
  p.action Няма общо с root (Linux)/Administrator (Windows)
  p.action Защо е това разделение?
  p.action Сигурност: между отделните процеси, както и между тях и ядрото


= slide '... а какво всъщност са процеси?' do

  p Това са потребителските програми
  p.action Всеки е разделен от всички останали
  p.action Всеки има свое виждане за паметта


= slide '... а какво всъщност е виртуална памет?' do

  p Паметта, до която имат достъп процесите
  p.action Те НЯМАТ достъп до истинските адреси във физическата памет
  p.action Всеки процес има собствена като те не се застъпват
  p.action Всеки процес има право да достъпи пълното адресно пространство
  p.action Виртуалната памет може да не е във физическата (swap file, memory mapped files, etc)


= slide 'Как User space достъпва kernel space' do

  p През така наречените System Calls
  p Това са обикновени функции, които можем да викаме
  p Намират се в стандартната С блиотека, която върви с всяка ОС
  p Те вътрешно ще направят магията
  p Магията се нарича interrupt-и


= slide '... а какво всъщност са interrupt-и?' do

  p Начин да кажем на ядрото, че искаме нещо да се случи (sys call)
  p Както и начин на процесора да каже на ядрото, че нещо е станало (timer interrupt)


= slide 'Как изглежда един процес във виртуалната памет?' do

  p Всеки процес, очевидно, има изпълним код
  p Stacks, heeps, read-only segments
  p Отделно има и mapped files, etc


= slide 'Изпълнимите файлове на твърдия диск' do

  p.action Съдържа кода на приложението
  p.action Може да съдържа кода на външни библиотеки
  p.action Или просто имената на тези външни зависимости
  p.action Примерна зависмист е стандартната С библиотека


= slide 'Как получаваме изпълними файлове?' do

  p.action Чрез компилация и линкване
  p.action Компилацията превежда отделен файл с програмен код към машинни инструкции
  p.action Линкването "свързва" отделни компилирани единици
  p.action Какво правим с външни зависимости, които не са наш код?
  p.action Като например printf от стандартната С библиотека?


= slide 'Static linking' do

  p Когато кодът на нужните библиотеки е в изпълнимия файл


= slide 'Dynamic linking' do

  p.action В изпълнимия файл има единствено имена на библиотеки и функции
  p.action Пример: libc.so:printf или msvcrt.dll:printf
  p.action ОС-а се грижи да "зареди" библиотеката и да навърже адресите


= slide 'static VS dynamic linking' do

  p.action По-големи изпълними файлове при статично линкване
  p.action Малко по-бързо изпъленение при статично линкване
  p.action Няма споделяне на код в обща библиотека при статично линкване
